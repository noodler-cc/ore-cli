name: Build

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: ore

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: version
        run: |
          version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          git_description=$(git describe --always --dirty=_modified)
          echo "version=${version}-${git_description}" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        run: rustup target add ${{ matrix.target }}

      - name: Install additional toolchains
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          set -x
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-musl)
              sudo apt-get update && sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
              mkdir -p .cargo
              echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config
              echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config
              ;;
            x86_64-pc-windows-gnu)
              sudo apt-get update && sudo apt-get install -y gcc-mingw-w64-x86-64-win32
              ;;
          esac

      - name: Configure cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # - name: Lint
      #   run: cargo fmt --check

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -x
          strip_tool="strip"
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu | x86_64-unknown-linux-musl)
              ;;
            aarch64-unknown-linux-gnu)
              strip_tool=aarch64-linux-gnu-strip
              ;;
            x86_64-pc-windows-gnu)
              strip_tool=x86_64-w64-mingw32-strip
              ;;
          esac
          $strip_tool target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

      - name: Package (unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -x
          rm -rf target/dist
          mkdir -p target/dist
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} target/dist/${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}

      - name: Package (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          if (Test-Path target/dist) { Remove-Item -Recurse -Force target/dist }
          New-Item -Path target/dist -ItemType Directory
          Copy-Item -Path target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe -Destination target/dist/${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}.exe

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}
          path: target/dist/*
