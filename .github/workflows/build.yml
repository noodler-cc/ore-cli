name: Build

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: ore

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - id: version
        run: echo version="$(cargo metadata --no-deps --quiet --color never | jq -r '.packages[].version')-$(git describe --always --dirty=_modified)" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Docker for aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker build -t my-rust-cross-aarch64 -<<EOF
          FROM rust:latest
          RUN rustup target add aarch64-unknown-linux-gnu
          RUN apt-get update && apt-get install -y \
              gcc-aarch64-linux-gnu \
              libssl-dev \
              pkg-config
          RUN rustup show
          RUN rustup target list --installed
          EOF
        
      - name: Build for aarch64 in Docker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          docker run --rm -v ${{ github.workspace }}:/home/rust/src -w /home/rust/src my-rust-cross-aarch64 \
          cargo build --release --target aarch64-unknown-linux-gnu
        
      - name: Setup Rust for x86_64
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: rustup target add x86_64-unknown-linux-gnu
        
      - name: Configure cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build for x86_64
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target x86_64-unknown-linux-gnu
        
      - name: Strip binary
        run: |
          strip_tool="strip"
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            strip_tool="aarch64-linux-gnu-strip"
          fi
          $strip_tool target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
        
      - name: Package
        run: |
          rm -rf target/dist
          mkdir -p target/dist
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} target/dist/${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}
          
      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ needs.version.outputs.version }}-${{ matrix.target }}
          path: target/dist/*
